TV=ACP_NIPALS(importaciones,20,6,0,0) #vectores propios
valpV=diag(t(PV)%*%as.matrix(PV)*(1/20)) #valores propios
PV
TV
valpV
#****ACP NO MANUAL (ADE4)
library(ade4)
#**ACP(INDIVIDUOS)
acpnipals=dudi.pca(importaciones,scannf=F,nf=2)
acpnipals$li #componentes primeras 2 dim
acpnipals$c1 #vectores propios primeras 2 dim
acpnipals$eig #valores propios
#ACP MANUAL DATOS FALTANTES (NIPALS)
ACP_NIPALSNA=function(datos,n,p){
library("far")
njm=colMeans(datos,na.rm=TRUE); njs=colSums(datos,na.rm=TRUE)
nj=njs/njm
X=scale(datos)*sqrt(nj/(nj-1))
X0=X
P=matrix(NA,p,p); T=matrix(NA,n,p)
P1i=matrix(NA,p,1)
for(h in 1:p){
t1=X0[,1]
for(i in 1:100){
for(j in 1:p){
j1 =na.omit(cbind(X0[,j],t1))
P1i[j]=sum(j1[,1]*j1[,2])/sum(j1[,2]^2)
}
P[,h]=P1i
Portn=orthonormalization(P[,1:h]); P1=Portn[,h]
for(i in 1:n){
i1=na.omit(cbind(X0[i,],P1))
t1[i]=sum(i1[,1]*i1[,2])/sum(i1[,2]^2)
}
T[,h]=t1
Tortg=orthonormalization(T[,1:h],norm=FALSE); t1=Tortg[,h]
} # end i
P[,h]=P1
T[,h]=t1
X1=X0-t1%*%t(P1); X0=X1
} # end h
L=diag(t(T)%*%T)/n
r.nipNA=list(T,P,L); return(r.nipNA)
}
#**ACP martriz al 5%
ACP_NIPALSNA(importaciones_1,20,6)
#**ACP martriz al 10%
ACP_NIPALSNA(importaciones_2,20,6)
#**ACP martriz al 15%
ACP_NIPALSNA(importaciones_3,20,6)
#**ACP martriz al 20%
ACP_NIPALSNA(importaciones_4,20,6)
#****ACP NO MANUA (ADE4)
library("ade4")
acpnipalsNA=dudi.pca(importaciones,scannf = T,nf=2)
acpnipalsNA=dudi.pca(importaciones,scannf = T,nf=2)
acpnipalsNA<-nipals(importaciones_1)
acpnipalsNA
acpnipals$co #Coordenadas de las variables
acpnipals$li #Coordenadas de los individuos
acpnipals$tab
acpnipals$eig
#**ACP martriz al 5%
acpnipals5NA<-nipals(importaciones_1)
acpnipals$li #Coordenadas de los individuos
acpnipals5NA$li #Coordenadas de los individuos
#**ACP martriz al 5%
acpnipals5NA<-nipals(importaciones_1)
#**ACP martriz al 10%
acpnipals10NA<-nipals(importaciones_2)
#**ACP martriz al 15%
acpnipals15NA<-nipals(importaciones_3)
#**ACP martriz al 20%
acpnipals20NA<-nipals(importaciones_4)
#--------------------------------------------------------#
#ACP EM
ACPEM=function(datos,n,p){
Z=matrZ(datos,n,p)
L=0
for (i in 1:p) {
if
}
}
importaciones_1[,1]=='NA'
#--------------------------------------------------------#
#ACP EM
ACPEM=function(datos,n,p){
Z=matrZ(datos,n,p)
L=0
for (i in 1:p) {
for (j in 1:n) {
if((Z[j,i])='NA'){
Z[j,i]=mean(Z[,i])
}
}
}
}
datos
#--------------------------------------------------------#
#ACP EM
ACPEM=function(datos,n,p){
datos
Z=matrZ(datos,n,p)
L=0
for (i in 1:p) {
for (j in 1:n) {
if((Z[j,i])='NA'){
Z[j,i]=mean(Z[,i])
}
}
}
}
#--------------------------------------------------------#
#ACP EM
Z<-0
ACPEM=function(datos,n,p){
Z=matrZ(datos,n,p)
L=0
for (i in 1:p) {
for (j in 1:n) {
if((Z[j,i])='NA'){
Z[j,i]=mean(Z[,i])
}
}
}
}
#--------------------------------------------------------#
#ACP EM
Z<-0
ACPEM=function(datos,n,p){
Z=matrZ(datos,n,p)
L=0
i=0
j=0
for (i in 1:p) {
for (j in 1:n) {
if((Z[j,i])='NA'){
Z[j,i]=mean(Z[,i])
}
}
}
}
#--------------------------------------------------------#
#ACP EM
ACPEM=function(datos,n,p){
Z=matrZ(datos,n,p)
L=0
for (i in 1:p) {
for (j in 1:n) {
if((Z[j,i])='NA'){
Z[j,i]=mean(Z[,i])
}
}
}
}
#--------------------------------------------------------#
#ACP EM
ACPEM=function(datos,n,p){
Z=matrZ(datos,n,p)
L=0
for (i in 1:p) {
for (j in 1:n) {
if((Z[j,i])=='NA'){
Z[j,i]=mean(Z[,i])
}
}
}
}
importaciones_1
ACPEM(importaciones_1,20,6)
#--------------------------------------------------------#
#ACP EM
ACPEM=function(datos,n,p){
Z=matrZ(datos,n,p)
L=0
for (i in 1:p) {
for (j in 1:n) {
if((Z[j,i])=='NA' is TRUE){
Z[j,i]=mean(Z[,i])
}
}
}
}
is.na(importaciones_1)
is.na(importaciones_1[2,5])
#--------------------------------------------------------#
#ACP EM
ACPEM=function(datos,n,p){
Z=matrZ(datos,n,p)
L=0
for (i in 1:p) {
for (j in 1:n) {
if(is.na(Z[j,i])=='TRUE'){
Z[j,i]=mean(Z[,i])
}
}
}
}
ACPEM(importaciones_1,20,6)
Z11<-ACPEM(importaciones_1,20,6)
Z11
#--------------------------------------------------------#
#ACP EM
ACPEM=function(datos,n,p){
Z=matrZ(datos,n,p)
L=0
for (i in 1:p) {
for (j in 1:n) {
if(is.na(Z[j,i])=='TRUE'){
Z[j,i]=mean(Z[,i])
}
}
}
return(Z)
}
#--------------------------------------------------------#
#ACP EM
ACPEM=function(datos,n,p){
Z=matrZ(datos,n,p)
L=0
for (i in 1:p) {
for (j in 1:n) {
if(is.na(Z[j,i])=='TRUE'){
Z[j,i]=mean(Z[,i],na.rm = 'TRUE')
}
}
}
return(Z)
}
ACPEM(importaciones_1,20,6)
#--------------------------------------------------------#
#ACP EM
ACPEM=function(datos,n,p){
Z=matrZ(datos,n,p)
L=0
for (i in 1:p) {
for (j in 1:n) {
if(is.na(Z[j,i])=='TRUE'){
Z[j,i]=mean(Z[,i],na.rm = 'FALSE')
}
}
}
return(Z)
}
ACPEM(importaciones_1,20,6)
#--------------------------------------------------------#
#ACP EM
ACPEM=function(datos,n,p){
X=datos
L=0
for (i in 1:p) {
for (j in 1:n) {
if(is.na(x[j,i])=='TRUE'){
x[j,i]=mean(x[,i],na.rm = 'FALSE')
}
}
}
return(x)
}
importaciones_1
ACPEM(importaciones_1,20,6)
#--------------------------------------------------------#
#ACP EM
ACPEM=function(datos,n,p){
X=datos
L=0
for (i in 1:p) {
for (j in 1:n) {
if(is.na(X[j,i])=='TRUE'){
X[j,i]=mean(X[,i],na.rm = 'FALSE')
}
}
}
return(X)
}
ACPEM(importaciones_1,20,6)
#--------------------------------------------------------#
#ACP EM
ACPEM=function(datos,n,p){
X=datos
L=0
for (i in 1:p) {
for (j in 1:n) {
if(is.na(X[j,i])=='TRUE'){
X[j,i]=mean(X[,i],na.rm = 'TRUE')
}
}
}
return(X)
}
ACPEM(importaciones_1,20,6)
importaciones_1
mean(importaciones_1[,1])
mean(importaciones_1[,1],na.rm = 'TRUE')
mean(importaciones_1[,1],na.rm = 'FALSE')
mean(importaciones_1[,2],na.rm = 'TRUE')
#--------------------------------------------------------#
#ACP EM
#FUNCIÓN PARA REEMPLAZAR DATOS FALTANTES POR VALORES INICIALES
reempNA=function(datos,n,p){
X0=datos
L=0
for (i in 1:p) {
for (j in 1:n) {
if(is.na(X0[j,i])=='TRUE'){
X0[j,i]=mean(X0[,i],na.rm = 'TRUE')
}
}
}
return(X0)
}
reempNA(importaciones_1,20,6)
#--------------------------------------------------------#
#ACP EM
#FUNCIÓN PARA REEMPLAZAR DATOS FALTANTES POR VALORES INICIALES
reempNA=function(datos,n,p){
X0=datos
for (i in 1:p) {
for (j in 1:n) {
if(is.na(X0[j,i])=='TRUE'){
X0[j,i]=mean(X0[,i],na.rm = 'TRUE')
}
}
}
return(X0)
}
ACP_manual(importaciones,20,6,3,0) #componentes
VL=ACP_manual(ZL,n,p,2,0)
ACP_manual(importaciones,20,6,1)
ACP_manual(importaciones,20,6,2,1)
ACP_manual(importaciones,20,6,3,1)
k<-ACP_manual(importaciones,20,6,2,1)
o<-ACP_manual(importaciones,20,6,3,1)
o%*%k
k
k<-ACP_manual(importaciones,20,6,2,1)$vectors
k
o
o%*%k
#Función algoritmo ACP EM
ACPEM=function(datos,n,p){
datos
L=0
X0=reempNA(datos,n,p)
ZL=matrZ(X0,n,p)
for (L in 0:100) {
VL=ACP_manual(ZL,n,p,2,1)$vectors  #Matriz de vectores propios
CL=ACP_manual(ZL,n,p,3,1)          #Componentes principales
x0=CL%*%VL                         #Reconstitucion de la matriz
}
}
#Función algoritmo ACP EM
ACPEM=function(datos,n,p){
datos
L=0
X0=reempNA(datos,n,p)
ZL=matrZ(X0,n,p)
for (L in 0:100) {
VL=ACP_manual(ZL,n,p,2,1)$vectors  #Matriz de vectores propios
CL=ACP_manual(ZL,n,p,3,1)          #Componentes principales
X0=CL%*%VL                         #Reconstitucion de la matriz
}
return(VL)
return(CL)
return(X0)
}
ACPEM(importaciones_1,20,6)
ACP_NIPALS(importaciones_1,20,6)
ACP_NIPALSNA(importaciones_1,20,6)
ACPEM(importaciones_1,20,6)
#Función algoritmo ACP EM
ACPEM=function(datos,n,p){
datos
L=0
X0=reempNA(datos,n,p)
ZL=matrZ(X0,n,p)
for (L in 0:100) {
VL=ACP_manual(ZL,n,p,2,1)$vectors  #Matriz de vectores propios
CL=ACP_manual(ZL,n,p,3,1)          #Componentes principales
X0=CL%*%VL                         #Reconstitucion de la matriz
}
result=list(VL,CL,X0)
return(result)
}
ACPEM(importaciones_1,20,6)
#Función algoritmo ACP EM
ACPEM=function(datos,n,p){
datos
L=0
X0=reempNA(datos,n,p)
ZL=matrZ(X0,n,p)
for (L in 0:1000) {
VL=ACP_manual(ZL,n,p,2,1)$vectors  #Matriz de vectores propios
CL=ACP_manual(ZL,n,p,3,1)          #Componentes principales
X0=CL%*%VL                         #Reconstitucion de la matriz
}
result=list(VL,CL,X0)
return(result)
}
ACPEM(importaciones_1,20,6)
#Función algoritmo ACP EM
ACPEM=function(datos,n,p){
datos
L=0
X0=reempNA(datos,n,p)
ZL=matrZ(X0,n,p)
for (L in 0:1) {
VL=ACP_manual(ZL,n,p,2,1)$vectors  #Matriz de vectores propios
CL=ACP_manual(ZL,n,p,3,1)          #Componentes principales
X0=CL%*%VL                         #Reconstitucion de la matriz
}
result=list(VL,CL,X0)
return(result)
}
ACPEM(importaciones_1,20,6)
#Función algoritmo ACP EM
ACPEM=function(datos,n,p){
datos
L=0
X0=reempNA(datos,n,p)
ZL=matrZ(X0,n,p)
for (L in 0:1) {
VL=ACP_manual(ZL,n,p,2,1)$vectors  #Matriz de vectores propios
CL=ACP_manual(ZL,n,p,3,1)          #Componentes principales
ZL=CL%*%VL                         #Reconstitucion de la matriz
}
result=list(VL,CL,X0)
return(result)
}
ACPEM(importaciones_1,20,6)
#Función algoritmo ACP EM
ACPEM=function(datos,n,p){
datos
L=0
X0=reempNA(datos,n,p)
ZL=matrZ(X0,n,p)
for (L in 0:100) {
VL=ACP_manual(ZL,n,p,2,1)$vectors  #Matriz de vectores propios
CL=ACP_manual(ZL,n,p,3,1)          #Componentes principales
ZL=CL%*%VL                         #Reconstitucion de la matriz
}
result=list(VL,CL,X0)
return(result)
}
ACPEM(importaciones_1,20,6)
importaciones_1
#Función algoritmo ACP EM
ACPEM=function(datos,n,p){
datos
L=0
X0=reempNA(datos,n,p)
ZL=matrZ(X0,n,p)
for (L in 0:1000) {
VL=ACP_manual(ZL,n,p,2,1)$vectors  #Matriz de vectores propios
CL=ACP_manual(ZL,n,p,3,1)          #Componentes principales
ZL=CL%*%VL                         #Reconstitucion de la matriz
}
result=list(VL,CL,X0)
return(result)
}
ACPEM(importaciones_1,20,6)
#Función algoritmo ACP EM
ACPEM=function(datos,n,p){
datos
L=0
X0=reempNA(datos,n,p)
ZL=matrZ(X0,n,p)
for (L in 0:1) {
VL=ACP_manual(ZL,n,p,2,1)$vectors  #Matriz de vectores propios
CL=ACP_manual(ZL,n,p,3,1)          #Componentes principales
ZL=CL%*%VL                         #Reconstitucion de la matriz
}
result=list(VL,CL,X0)
return(result)
}
ACPEM(importaciones_1,20,6)
#Función algoritmo ACP EM
ACPEM=function(datos,n,p){
datos
L=0
X0=reempNA(datos,n,p)
ZL=matrZ(X0,n,p)
for (L in 0:100) {
VL=ACP_manual(ZL,n,p,2,1)$vectors  #Matriz de vectores propios
CL=ACP_manual(ZL,n,p,3,1)          #Componentes principales
ZL=CL%*%VL                         #Reconstitucion de la matriz
}
result=list(VL,CL,X0)
return(result)
}
ACPEM(importaciones_1,20,6)
importaciones_1
#Función algoritmo ACP EM
ACPEM=function(datos,n,p){
datos
L=0
X0=reempNA(datos,n,p)
ZL=matrZ(X0,n,p)
for (L in 0:1000) {
VL=ACP_manual(ZL,n,p,2,1)$vectors  #Matriz de vectores propios
CL=ACP_manual(ZL,n,p,3,1)          #Componentes principales
ZL=CL%*%VL                         #Reconstitucion de la matriz
}
result=list(VL,CL,X0)
return(result)
}
ACPEM(importaciones_1,20,6)
importaciones_1
ACP_manual(importaciones,20,6,3,1) #componentes
#**ACP EM matriz al 20%
ACPEM(importaciones_4,20,6)
importaciones_4
